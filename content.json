{"meta":{"title":"BSL-Blog","subtitle":"BSL博客","description":"分享有趣的编程项目","author":"wangzirui32","url":"http://wangzirui32.github.io","root":"/"},"pages":[],"posts":[{"title":"【Python+pandas】学生测试成绩求和排序","slug":"【Python-pandas】学生测试成绩求和排序","date":"2023-01-11T10:04:34.000Z","updated":"2023-01-11T10:09:24.240Z","comments":true,"path":"2023/01/11/【Python-pandas】学生测试成绩求和排序/","link":"","permalink":"http://wangzirui32.github.io/2023/01/11/%E3%80%90Python-pandas%E3%80%91%E5%AD%A6%E7%94%9F%E6%B5%8B%E8%AF%95%E6%88%90%E7%BB%A9%E6%B1%82%E5%92%8C%E6%8E%92%E5%BA%8F/","excerpt":"","text":"需求将如下每个学生三次测试的成绩求和后排序，并显示名次： 1. 导入数据123import pandasdf = pandas.read_excel(&quot;score.xlsx&quot;) 在本案例中，我们将使用pandas作为数据处理的第三方库（安装命令：pip install pandas）. 2. 成绩求和12sum_score = [i for i in df.sum(axis=1)]df[&quot;所有测试成绩总分&quot;] = sum_score df.sum(axis=1)：指对每一行的数值进行求和，它所返回的对象为Series，这是一个一维数组，类似于列表. [i for i in df.sum(axis=1)]：我们遍历Series中的每一项，获得各行成绩求和的结果，将其转化为列表的形式，最后赋予sum_score. df[&quot;所有测试成绩总分&quot;] = sum_score：在原有的数据表中新增所有测试成绩总分这一列，它的值为列表sum_score. 3. 排序总分 显示名次123df = df.sort_values(by=&quot;所有测试成绩总分&quot;, ascending=False)df.index = range(1, len(df)+1)print(df) df = df.sort_values(by=&quot;所有测试成绩总分&quot;, ascending=False)：以所有测试成绩总分这一列的数值为依据，进行排列，ascending=False决定排序方式为降序. df.index = range(1, len(df)+1)：为数据表重新设置索引，显示名次. 4. 保存结果1df.to_excel(&quot;output.xlsx&quot;) 将结果输出到文件output.xlsx.output.xlsx如下： 5. 完整代码1234567891011import pandasdf = pandas.read_excel(&quot;score.xlsx&quot;)sum_score = [i for i in df.sum(axis=1)]df[&quot;所有测试成绩总分&quot;] = sum_scoredf = df.sort_values(by=&quot;所有测试成绩总分&quot;, ascending=False)df.index = range(1, len(df)+1)print(df)df.to_excel(&quot;output.xlsx&quot;) 总结df.sum函数用于对目标数据表的排列，当传入axis=1时，求各行的和；不传axis时，求各列的和. df.sort_values用于对某一列的排序工作，by指定目标列，ascending决定是否为升序或降序：当其值为True时，按升序排列；反之亦然. df.index赋予列表值可以重新设置索引列.","categories":[],"tags":[{"name":"python,pandas,数据处理","slug":"python-pandas-数据处理","permalink":"http://wangzirui32.github.io/tags/python-pandas-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"}]},{"title":"【Python】Lambda表达式","slug":"【Python】Lambda表达式","date":"2023-01-09T01:52:03.000Z","updated":"2023-01-09T01:55:38.576Z","comments":true,"path":"2023/01/09/【Python】Lambda表达式/","link":"","permalink":"http://wangzirui32.github.io/2023/01/09/%E3%80%90Python%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"","text":"✨博文作者 wangzirui32💖 喜欢的可以 点赞 收藏 关注哦~~👉本文首发于CSDN，未经许可禁止转载 1. 什么是LambdaLambda在Python编程中使用的频率非常高，这种表达式其实是Python中的一类特殊的定义函数的形式，使用它可以定义一个匿名函数。当你需要一个简单功能的函数，Lambda能满足大部分需求。 2. Lambda语法Lambda语法格式如下： 1lambda 参数1, 参数2, ...., 参数n: 执行语句 示例代码： 123# 计算x的三次方f = lambda x: x**3print(f(3)) 输出： 127 注意，lambda语句中，冒号（:）后执行一个表达式，不需要用return返回结果，你可以使用if语句： 1234# 判断是否为偶数 是偶数返回True 否则返回Falsef = lambda x: True if x % 2 == 0 else Falseprint(f(10))print(f(11)) 输出： 12TrueFalse 也可以指定多个参数： 123# 求x y z的平均值f = lambda x, y, z: (x+y+z)/3print(f(11, 45, 14)) 输出： 123.33333333333 3. Lambda高阶用法3.1 排序现有如下列表： 123students = [&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 10, &quot;score&quot;: 87&#125;, &#123;&quot;name&quot;: &quot;Sally&quot;, &quot;age&quot;: 9, &quot;score&quot;: 100&#125;, &#123;&quot;name&quot;: &quot;James&quot;, &quot;age&quot;: 13, &quot;score&quot;: 95&#125;] 需求：将列表中的学生信息分别按年龄和分数进行排序。我们可以使用lambda表达式和排序函数达成需求，代码： 1234567891011students = [&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 10, &quot;score&quot;: 87&#125;, &#123;&quot;name&quot;: &quot;Sally&quot;, &quot;age&quot;: 18, &quot;score&quot;: 100&#125;, &#123;&quot;name&quot;: &quot;James&quot;, &quot;age&quot;: 13, &quot;score&quot;: 95&#125;]# 这里的lambda返回学生的年龄作为排序依据students.sort(key=lambda student: student[&#x27;age&#x27;])print(&quot;按年龄排序：&quot;, students)# 这里的lambda返回学生的分数作为排序依据students.sort(key=lambda student: student[&#x27;score&#x27;], reverse=True)print(&quot;按分数排序：&quot;, students) 输出结果： 12按年龄排序： [&#123;&#x27;name&#x27;: &#x27;John&#x27;, &#x27;age&#x27;: 10, &#x27;score&#x27;: 87&#125;, ......]按分数排序： [&#123;&#x27;name&#x27;: &#x27;Sally&#x27;, &#x27;age&#x27;: 18, &#x27;score&#x27;: 100&#125;, ......] 3.2 序列映射现有如下列表： 1numbers = [1, 2, 3, 4, 5, 6, 7] 需求：将列表内的所有数字元素全部执行一次立方操作。我们可以结合map函数达成需求，代码： 1234numbers = [1, 2, 3, 4, 5, 6, 7]# 这里的lamdba返回x的立方new_numbers = list(map(lambda x: x**3, numbers))print(new_numbers) 输出： 1[1, 8, 27, 64, 125, 216, 343] map函数可以用来映射序列，调用参数如下： 1map(映射函数, 序列列表) 映射过程类似于： numbers 1 2 3 4 5 6 7 映射 ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ new_numbers 1 8 27 64 125 216 343 3.3 过滤元素现有如下列表： 1numbers = [11, 4, 5, 14, 10, 32, 50, 19, 20] 需求：过滤出列表中10以上的偶数。我们可以使用filter内置函数，代码： 123numbers = [11, 4, 5, 14, 10, 32, 50, 19, 20]new_numbers = list(filter(lambda x: x % 2 == 0 and x &gt;= 10, numbers)) print(new_numbers) 输出： 1[14, 10, 32, 50, 20] 在这个lambda表达式内，我们限定了条件x % 2 == 0 and x &gt;= 10，如果2个条件都满足，表达式结果为True，否则为False。整个过程类似于： numbers 11 4 5 14 10 32 50 19 20 是否符合条件 False False False True True True True False True new_numbers None None None 14 10 32 50 None 20 3.4 指定相邻元素的结合条件现有如下列表： 1students = [&quot;John&quot;, &quot;Jack&quot;, &quot;James&quot;, &quot;Malfoy&quot;, &quot;Sally&quot;] 需求：将每两个学生姓名之间添上”,”连接并输出。我们可以使用reduce函数，代码： 123from functools import reducestudents = [&quot;John&quot;, &quot;Jack&quot;, &quot;James&quot;, &quot;Malfoy&quot;, &quot;Sally&quot;]print(reduce(lambda a, b: &quot;&#123;&#125; , &#123;&#125;&quot;.format(a, b), students)) 输出： 1John , Jack , James , Malfoy , Sally 3.5 函数装饰器当一个函数返回lambda匿名函数时，这就类似于Python中的函数装饰器了，示例代码： 12345def welcome_text(text): return lambda username: &quot;Welcome &#123;&#125;!\\n&#123;&#125;&quot;.format(username, text) welcome_user = welcome_text(&quot;这里是wangzirui32的编程课堂！&quot;)print(welcome_user(&quot;Malfoy&quot;)) 输出： 12Welcome Malfoy!这里是wangzirui32的编程课堂！","categories":[{"name":"Python","slug":"Python","permalink":"http://wangzirui32.github.io/categories/Python/"}],"tags":[{"name":"python,lambda","slug":"python-lambda","permalink":"http://wangzirui32.github.io/tags/python-lambda/"}]}],"categories":[{"name":"Python","slug":"Python","permalink":"http://wangzirui32.github.io/categories/Python/"}],"tags":[{"name":"python,pandas,数据处理","slug":"python-pandas-数据处理","permalink":"http://wangzirui32.github.io/tags/python-pandas-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"python,lambda","slug":"python-lambda","permalink":"http://wangzirui32.github.io/tags/python-lambda/"}]}